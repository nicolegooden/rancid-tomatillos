{"version":3,"sources":["tomato.png","apiCalls.js","Login/Login.js","ShowPage/ShowPage.js","Header/Header.js","MovieCard/MovieCard.js","MovieContainer/MovieContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","getAllRatings","userID","fetch","then","response","json","catch","error","console","log","getComments","movieID","Login","props","handleInputChange","event","setState","target","name","value","handleLogin","emailValue","passwordValue","preventDefault","state","email","password","method","headers","body","JSON","stringify","user","setUser","clearInputs","this","updateLoginView","to","className","htmlFor","type","placeholder","onChange","onClick","Component","ShowPage","showAllComments","allComments","length","map","commentInfo","comment","author","determineSingleMovie","id","getSingleMovie","singleMovie","currentMovie","movie","retrieveAllRatings","getGenres","genres","genre","handleChange","commentInput","submitReview","a","comments","determineUserRating","findUserRating","userView","overview","title","alt","src","backdrop_path","tagline","Math","floor","average_rating","runtime","release_date","rows","cols","wrap","Header","tomato","aria-label","headerText","logButton","MovieCard","editRating","ratingID","userRating","trackRating","inputRating","submitRating","movie_id","rating","parseInt","determineIfLink","path","posterPath","determineRatingContent","role","tabIndex","min","max","averageRating","MovieContainer","allMovieCards","allMovies","poster_path","userRatings","find","App","determineHeaderText","logOutUser","hasLoginView","returnGuestToHomepage","determineLogButtonStatus","selectedMovieID","match","ratingInfo","movies","bind","alert","ratings","exact","render","params","Boolean","window","location","hostname","router","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,oC,sUC6C1BC,EAAgB,SAACC,GAC5B,OAAOC,MAAM,yDAAD,OAA0DD,EAA1D,aACTE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OA2BnBG,EAAc,SAACC,GAC1B,OAAOT,MAAM,uCAAD,OAAwCS,EAAxC,cACXR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OCUnBK,G,wDAjFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAdjC,EAwBnBC,YAAc,SAACL,GDtBc,IAACM,EAAYC,ECuBxCP,EAAMQ,iBACmB,KAArB,EAAKC,MAAMC,OAAwC,KAAxB,EAAKD,MAAME,UDxBdL,ECyBd,EAAKG,MAAMC,MDzBeH,ECyBR,EAAKE,MAAME,SDxBlCxB,MAAM,uDAAwD,CACnEyB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,MAAOJ,EACPK,SAAUJ,MAGbnB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OCc3BJ,MAAK,SAAA6B,GAAI,OAAI,EAAKnB,MAAMoB,QAAQD,MAChC7B,MAAK,kBAAM,EAAKa,SAAS,CAAET,MAAO,sDAEnC,EAAKS,SAAS,CAAET,MAAO,+CAEzB,EAAK2B,eA/BL,EAAKV,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVnB,MAAO,IALQ,E,gEAUjB4B,KAAKtB,MAAMuB,oB,oCAQXD,KAAKnB,SAAS,CACZS,MAAO,GACPC,SAAU,O,+BAiBZ,OAAIS,KAAKtB,MAAMmB,KAAKd,KACX,kBAAC,IAAD,CAAUmB,GAAG,MAGpB,6BAASC,UAAU,mBACjB,0BAAMA,UAAU,cACd,yBAAKA,UAAU,mBACb,2BAAOA,UAAU,cAAcC,QAAQ,cAAvC,UACA,2BACED,UAAU,cACVE,KAAK,OACLC,YAAY,oBACZvB,KAAK,QACLC,MAAOgB,KAAKX,MAAMC,MAClBiB,SAAYP,KAAKrB,qBAGrB,yBAAKwB,UAAU,sBACb,2BAAOA,UAAU,cAAcC,QAAQ,iBAAvC,aACA,2BACED,UAAU,cACVE,KAAK,WACLC,YAAY,iBACZvB,KAAK,WACLC,MAAOgB,KAAKX,MAAME,SAClBgB,SAAYP,KAAKrB,qBAGrB,4BAAQwB,UAAU,eAAeK,QAASR,KAAKf,aAA/C,SACA,2BAAIe,KAAKX,MAAMjB,a,GAnELqC,c,yBCiHLC,G,wDAjHb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRiC,gBAAkB,WAChB,GAAI,EAAKtB,MAAMuB,YAAYC,OACzB,OAAO,EAAKxB,MAAMuB,YAAYE,KAAI,SAAAC,GAChC,OACE,6BAASZ,UAAU,gBACjB,+BAAKY,EAAYC,QAAjB,KACA,iCAAOD,EAAYE,aA1BV,EAiCnBC,qBAAuB,SAACC,IFfQ,SAACA,GAC7B,OAAOpD,MAAM,yDAAD,OAA0DoD,IACrEnD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OEa9BgD,CAAeD,GACZnD,MAAK,SAAAqD,GAAW,OAAI,EAAKxC,SAAS,CAACyC,aAAcD,EAAYE,WAC7DvD,KAAK,EAAKU,MAAM8C,sBAChBrD,OAAM,SAAAC,GAAK,OAAI,EAAKS,SAAS,CAAET,MAAOA,QArCxB,EAwCjBqD,UAAY,WACV,OAAO,EAAKpC,MAAMiC,aAAaI,OAAOZ,KAAI,SAAAa,GACxC,MAAM,GAAN,OAAUA,EAAV,SA1Ca,EA8CjBC,aAAe,SAAChD,GACd,EAAKC,SAAS,CAAEgD,aAAejD,EAAME,OAAOE,SA/C7B,EAkDjBe,YAAc,WACZ,EAAKlB,SAAS,CAACgD,aAAc,MAnDd,EAsDjBC,aAtDiB,sBAsDF,sBAAAC,EAAA,sEFAavD,EECR,EAAKE,MAAMyC,GFDMH,EECF,EAAK3B,MAAMwC,aFDAZ,EECc,EAAKvC,MAAMmB,KAAKd,KFAnEhB,MAAM,uCAAD,OAAwCS,EAAxC,aAA4D,CACtEgB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBoB,QAASA,EACTC,OAAQA,MAGXjD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MEZf,OAEbG,EAAY,EAAKG,MAAMyC,IACtBnD,MAAK,SAAAgE,GAAQ,OAAI,EAAKnD,SAAS,CAAE+B,YAAaoB,EAASA,cACvDhE,MAAK,kBAAM,EAAK+B,iBAJJ,iCFAY,IAACvB,EAASwC,EAASC,IEA/B,OAtDE,EA6DjBgB,oBAAsB,WACpB,GAAI,EAAKvD,MAAMwD,eAAe,EAAKxD,MAAMyC,IAAM,EAC7C,OACE,uBAAGhB,UAAU,eAAb,cACc,EAAKzB,MAAMwD,eAAe,EAAKxD,MAAMyC,IADnD,QA9DN,EAAK9B,MAAQ,CACXiC,aAAc,GACdlD,MAAO,GACPyD,aAAc,GACdjB,YAAa,IANE,E,gEAUE,IAAD,OAClBZ,KAAKkB,qBAAqBlB,KAAKtB,MAAMyC,IACrC5C,EAAYyB,KAAKtB,MAAMyC,IACtBnD,MAAK,SAAAgE,GACAA,GACF,EAAKnD,SAAS,CAAE+B,YAAaoB,EAASA,gB,+BAyDxC,IAAIG,EAiCJ,OA/BEA,EADEnC,KAAKX,MAAMiC,aAAac,SAExB,8BACE,wBAAIjC,UAAU,mBAAmBH,KAAKtB,MAAM2D,OAC5C,6BAASlC,UAAU,uBACjB,6BAASA,UAAU,+BACjB,yBAAKA,UAAU,kBAAkBmC,IAAI,gCAAgCC,IAAMvC,KAAKX,MAAMiC,aAAakB,gBACnG,uBAAGrC,UAAU,WAAWH,KAAKX,MAAMiC,aAAamB,SAChD,6BAAStC,UAAU,WACjB,uBAAGA,UAAU,4BAAb,mBAAyDuC,KAAKC,MAAM3C,KAAKtB,MAAMkE,gBAA/E,OACC5C,KAAKiC,wBAGV,6BAAS9B,UAAU,oCACjB,uBAAGA,UAAU,YAAb,YAAkCH,KAAKX,MAAMiC,aAAauB,QAA1D,YACA,uBAAG1C,UAAU,UAAb,WAA+BH,KAAKyB,aACpC,uBAAGtB,UAAU,YAAYH,KAAKX,MAAMiC,aAAac,UACjD,uBAAGjC,UAAU,gBAAb,iBAA2CH,KAAKX,MAAMiC,aAAawB,gBAGvE,6BAAS3C,UAAU,gBACjB,2BAAOC,QAAQ,iBAAf,kBACA,8BAAUpB,MAAOgB,KAAKX,MAAMwC,aAActB,SAAUP,KAAK4B,aAAcmB,KAAK,IAAIC,KAAK,KAAKC,KAAK,OAAO9C,UAAU,kBAChH,4BAAQA,UAAU,wBAAwBK,QAASR,KAAK8B,cAAxD,WAEF,6BAAS3B,UAAU,gBAChBH,KAAKW,oBAID,kDAGX,6BACGwB,O,GA5GY1B,c,yBCURyC,MAVf,SAAgBxE,GACd,OACE,6BAASyB,UAAU,UACjB,yBAAKA,UAAU,eAAeoC,IAAKY,IAAQb,IAAI,iBAC/C,wBAAIc,aAAW,IAAIjD,UAAU,kBAAkBzB,EAAM2E,YAClD3E,EAAM4E,YC+DAC,G,wDAlEb,WAAY7E,GAAQ,IAAD,8BACjB,cAAMA,IAOR8E,WAAa,WJoCiB,IAAC1F,EAAQ2F,GAAR3F,EInChB,EAAKY,MAAMmB,KAAKsB,GJmCQsC,EInCJ,EAAK/E,MAAMgF,WAAWvC,GJoC9CpD,MAAM,wDAAD,OAAyDD,EAAzD,oBAA2E2F,GAAY,CACjGjE,OAAQ,SACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,MACpBzB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OIzC/BJ,MAAK,kBAAM,EAAKU,MAAM8C,yBAVN,EAanBmC,YAAc,SAAC/E,GACb,EAAKC,SAAS,CAAC+E,YAAahF,EAAME,OAAOE,SAdxB,EAiBnB6E,aAAe,WJMmB,IAAC1C,EAAI3C,EAASkF,EIL1C,EAAKrE,MAAMuE,aAAe,GAAK,EAAKvE,MAAMuE,aAAe,IAC3D,EAAK/E,SAAS,CAACT,OAAO,KJIS+C,EIHd,EAAKzC,MAAMmB,KAAKsB,GJGE3C,EIHE,EAAKE,MAAMyC,GJGJuC,EIHQ,EAAKrE,MAAMuE,YJIxD7F,MAAM,wDAAD,OAAyDoD,EAAzD,YAAuE,CACjF3B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBkE,SAAUtF,EACVuF,OAAQC,SAASN,OAGlB1F,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OId7BJ,MAAK,kBAAM,EAAKU,MAAM8C,yBAEvB,EAAK3C,SAAS,CAACT,OAAO,KAvBP,EA2BnB6F,gBAAkB,SAACC,GACjB,OAAI,EAAKxF,MAAMmB,KAAKd,KACX,kBAAC,IAAD,CAAMmB,GAAIgE,GAAM,yBAAK/D,UAAU,mBAAmBmC,IAAI,2CAA2CC,IAAK,EAAK7D,MAAMyF,cAEjH,yBAAKhE,UAAU,mBAAmBmC,IAAI,2CAA2CC,IAAK,EAAK7D,MAAMyF,cA/BzF,EAmCnBC,uBAAyB,WACvB,OAAI,EAAK1F,MAAMmB,KAAKd,OAAS,EAAKL,MAAMgF,WAEpC,oCACE,2BAAOtD,QAAQ,cAAf,gBACA,2BAAOG,SAAU,EAAKoD,YAAaU,KAAK,aAAaC,SAAS,IAAIjE,KAAK,SAASkE,IAAI,IAAIC,IAAI,KAAKrE,UAAU,oBAAoBG,YAAY,YAAW,6BACtJ,4BAAQE,QAAS,EAAKqD,aAAc1D,UAAU,wBAA9C,UAAoF,6BAClF,EAAKd,MAAMjB,OACb,gEAEK,EAAKM,MAAMmB,KAAKd,MAAQ,EAAKL,MAAMgF,WAE1C,oCACE,uBAAGvD,UAAU,qBAAb,cAA6C,EAAKzB,MAAMgF,WAAWK,QACnE,4BAAQvD,QAAS,EAAKgD,WAAYrD,UAAU,oBAA5C,qBAJC,GA3CP,EAAKd,MAAQ,CACXuE,YAAa,EACbxF,OAAO,GAJQ,E,qDAsDjB,IAAM8F,EAAI,iBAAalE,KAAKtB,MAAMyC,IAClC,OACE,6BAAShB,UAAU,cAChBH,KAAKiE,gBAAgBC,GACtB,wBAAI/D,UAAU,eAAgBH,KAAKtB,MAAM2D,OAEzC,uBAAGlC,UAAU,wBAAb,mBAAsDuC,KAAKC,MAAM3C,KAAKtB,MAAM+F,gBAC3EzE,KAAKoE,8B,GA9DU3D,c,MCwBTiE,MAzBf,SAAwBhG,GACtB,IAAMiG,EAAejG,EAAMkG,UAAU9D,KAAI,SAAAS,GACvC,OAAO,kBAAC,EAAD,CACL4C,WAAY5C,EAAMsD,YAClBxC,MAAOd,EAAMc,MACboC,cAAelD,EAAMqB,eACrBzB,GAAII,EAAMJ,GACVtB,KAAMnB,EAAMmB,KACZ6D,WAAYhF,EAAMoG,YAAYC,MAAK,SAAAhB,GACjC,OAAOA,EAAOD,WAAavC,EAAMJ,MAEnCK,mBAAoB9C,EAAM8C,wBAG9B,OAAI9C,EAAMkG,UAEN,6BAASzE,UAAU,mBAAmBwE,GAItC,iDCuGSK,G,wDArHb,aAAe,IAAD,8BACZ,gBAmCFC,oBAAsB,WACpB,OAAI,EAAK5F,MAAMQ,KAAKd,KACZ,iBAAN,OAAwB,EAAKM,MAAMQ,KAAKd,MAEjC,qBAxCG,EA4CdmG,WAAa,WACX,EAAKrG,SAAS,CAACgB,KAAM,GAAIsF,cAAc,KA7C3B,EAgDdlF,gBAAkB,WACX,EAAKZ,MAAMQ,KAAKd,MACnB,EAAKF,SAAS,CAACsG,cAAc,KAlDnB,EAsDdC,sBAAwB,WACtB,EAAKvG,SAAS,CAACsG,cAAc,KAvDjB,EA0DdE,yBAA2B,WACzB,OAAI,EAAKhG,MAAMQ,KAAKd,KACX,kBAAC,IAAD,CAAMmB,GAAG,KAAI,4BAAQC,UAAU,aAAaK,QAAS,EAAK0E,YAA7C,WACX,EAAK7F,MAAM8F,aACb,kBAAC,IAAD,CAAMjF,GAAG,KAAI,4BAAQC,UAAU,aAAaK,QAAS,EAAK4E,uBAA7C,qBAGb,kBAAC,IAAD,CAAMlF,GAAG,UAAS,4BAAQC,UAAU,cAAlB,WAjEf,EAqEd+B,eAAiB,SAACoD,GAChB,GAAI,EAAKjG,MAAMyF,YAAYjE,OAAQ,CACjC,IAAI0E,EAAQ,EAAKlG,MAAMyF,YAAYC,MAAK,SAAAS,GACtC,OAAOA,EAAW1B,WAAawB,KAEjC,GAAIC,EACF,OAAOA,EAAMxB,SAzEjB,EAAK1E,MAAQ,CACXoG,OAAQ,GACRrH,MAAO,GACPyB,KAAM,GACNiF,YAAa,GACbK,cAAc,GAEhB,EAAKrF,QAAU,EAAKA,QAAQ4F,KAAb,gBACf,EAAKlE,mBAAqB,EAAKA,mBAAmBkE,KAAxB,gBAVd,E,gEAaO,IAAD,ONvBP3H,MAAM,yDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GACHC,QAAQC,IAAI,QAASF,GACrBuH,MAAM,yCMqBb3H,MAAK,SAAA4G,GAAS,OAAI,EAAK/F,SAAS,CAAE4G,OAAQb,EAAUa,YACpDtH,OAAM,SAAAC,GACL,EAAKS,SAAS,CAAGT,MAAOA,S,8BAIpByB,GAAM,IAAD,OACXG,KAAKnB,SAASgB,GACVG,KAAKX,MAAMQ,KAAKd,MAClBlB,EAAcmC,KAAKX,MAAMQ,KAAKsB,IAC7BnD,MAAK,SAAA4H,GAAO,OAAI,EAAK/G,SAAS,CAACiG,YAAac,EAAQA,e,2CAInC,IAAD,OACnB/H,EAAcmC,KAAKX,MAAMQ,KAAKsB,IAC7BnD,MAAK,SAAA4H,GACJ,EAAK/G,SAAS,CAACiG,YAAac,EAAQA,e,+BAgD9B,IAAD,OACP,OACE,8BACE,kBAAC,EAAD,CACEvC,WAAYrD,KAAKiF,sBACjB3B,UAAWtD,KAAKqF,6BAElB,kBAAC,IAAD,CAAOQ,OAAK,EAAC3B,KAAK,KAChB,kBAAC,EAAD,CACErE,KAAMG,KAAKX,MAAMQ,KACjB+E,UAAW5E,KAAKX,MAAMoG,OACtBX,YAAa9E,KAAKX,MAAMyF,YACxBtD,mBAAoBxB,KAAKwB,sBAG7B,kBAAC,IAAD,CAAO0C,KAAK,aACV4B,OAAQ,YAAgB,IACd3E,EADa,EAAZoE,MACYQ,OAAb5E,GACFE,EAAc,EAAKhC,MAAMoG,OAAOV,MAAK,SAAAxD,GAAK,OAAIA,EAAMJ,KAAO6C,SAAS7C,MAC1E,OAAO,kBAAC,EAAD,iBAAcE,EAAd,CACLa,eAAgB,EAAKA,eACrBV,mBAAoB,EAAKA,mBACzB3B,KAAM,EAAKR,MAAMQ,WAGvB,kBAAC,IAAD,CAAOgG,OAAK,EAAC3B,KAAK,UAChB,kBAAC,EAAD,CACEpE,QAASE,KAAKF,QACdD,KAAMG,KAAKX,MAAMQ,KACjBI,gBAAiBD,KAAKC,wB,GA9GhBQ,cCEEuF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCXN,IAAMa,EAAS,kBAAC,IAAD,KACG,kBAAC,EAAD,OAGlBC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACGF,GAEHG,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3I,MAAK,SAAA4I,GACJA,EAAaC,gBAEd1I,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0I,c","file":"static/js/main.feaf13bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato.6ec1b1ac.png\";","   export const getMovies = () => {\n        return fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies')\n        .then(response => response.json())\n        .catch(error => {\n            console.log('error', error);\n            alert('Oops, no movies to show right now!');\n        })\n    }\n\n    export const getUserData = (emailValue, passwordValue) => {\n      return fetch('https://rancid-tomatillos.herokuapp.com/api/v2/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: emailValue,\n          password: passwordValue\n        })\n      })\n      .then(response => response.json())\n      .catch(error => console.log(error))\n    }\n\n    export const getSingleMovie = (id) => {\n      return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${id}`)\n      .then(response => response.json())\n      .catch(error => console.log(error))\n    }\n\n    export const submitUserRating = (id, movieID, userRating) => {\n      return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/users/${id}/ratings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_id: movieID,\n          rating: parseInt(userRating)\n        })\n      })\n        .then(response => response.json())\n        .catch(error => console.log(error))\n    }\n\n    export const getAllRatings = (userID) => {\n      return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2//users/${userID}/ratings`)\n        .then(response => response.json())\n        .catch(error => console.log(error))\n    }\n\n    export const deleteRating = (userID, ratingID) => {\n      return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/users/${userID}/ratings/${ratingID}`, {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({})\n      }).catch(error => console.log(error))\n    }\n    export const postComment = (movieID, comment, author) => {\n      return fetch(`http://localhost:3001/api/v1/movies/${movieID}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          comment: comment, \n          author: author\n        })\n      })\n      .then(response => response.json())\n      .catch(error => console.log(error))\n    }\n\n    export const getComments = (movieID) => {\n      return fetch(`http://localhost:3001/api/v1/movies/${movieID}/comments`)\n      .then(response => response.json())\n      .catch(error => console.log(error))\n    }\n","import React, { Component } from 'react';\nimport { getUserData } from '../apiCalls'\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email: '',\n      password: '',\n      error: ''\n    }\n  }\n\n  componentDidMount() {\n    this.props.updateLoginView()\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  clearInputs() {\n    this.setState({\n      email: '',\n      password: ''\n    })\n  }\n\n  handleLogin = (event) => {\n    event.preventDefault();\n    if (this.state.email !== '' && this.state.password !== '') {\n      getUserData(this.state.email, this.state.password)\n      .then(user => this.props.setUser(user))\n      .then(() => this.setState({ error: 'Incorrect email or password, please try again.' }))\n    } else {\n      this.setState({ error: 'Please enter your email and your password.' })\n    }\n    this.clearInputs();\n  }\n\n  render() {\n    if (this.props.user.name) {\n      return <Redirect to='/' />\n    }\n    return (\n      <section className='login-container'>\n        <form className='login-form'>\n          <div className='email-input-div'>\n            <label className='login-label' htmlFor='user-email'>Email:</label>\n            <input\n              className='login-input'\n              type='text'\n              placeholder='example@email.com'\n              name='email'\n              value={this.state.email}\n              onChange = {this.handleInputChange}\n            />\n          </div>\n          <div className='password-input-div'>\n            <label className='login-label' htmlFor='user-password'>Password:</label>\n            <input\n              className='login-input'\n              type='password'\n              placeholder='enter password'\n              name='password'\n              value={this.state.password}\n              onChange = {this.handleInputChange}\n            />\n          </div>\n          <button className='login-button' onClick={this.handleLogin}>Login</button>\n          <p>{this.state.error}</p>\n        </form>\n      </section>\n    )\n  }\n}\n\nLogin.propTypes = {\n  user: PropTypes.object.isRequired,\n  setUser: PropTypes.func.isRequired,\n  updateLoginView: PropTypes.func.isRequired\n}\n\n\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getSingleMovie, postComment, getComments } from '../apiCalls';\nimport './ShowPage.css';\n\nclass ShowPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMovie: {},\n      error: '',\n      commentInput: '',\n      allComments: []\n    }\n  }\n\n  componentDidMount() {\n    this.determineSingleMovie(this.props.id)\n    getComments(this.props.id)\n    .then(comments => {\n      if (comments) {\n        this.setState({ allComments: comments.comments })\n      }\n    })\n  }\n\n  showAllComments = () => {\n    if (this.state.allComments.length) {\n      return this.state.allComments.map(commentInfo => {\n        return (\n          <article className='comment-card'>\n            <p>\"{commentInfo.comment}\"</p>\n            <p> - {commentInfo.author}</p>\n          </article>\n        )\n      })\n    }\n  }\n\n  determineSingleMovie = (id) => {\n    getSingleMovie(id)\n      .then(singleMovie => this.setState({currentMovie: singleMovie.movie}))\n      .then(this.props.retrieveAllRatings())\n      .catch(error => this.setState({ error: error }));\n  }\n\n    getGenres = () => {\n      return this.state.currentMovie.genres.map(genre => {\n        return `${genre} `;\n      })\n    }\n    \n    handleChange = (event) => {\n      this.setState({ commentInput:  event.target.value})\n    }\n\n    clearInputs = () => {\n      this.setState({commentInput: ''})\n    }\n\n    submitReview = async () => {\n      await postComment(this.props.id, this.state.commentInput, this.props.user.name)\n      getComments(this.props.id)\n      .then(comments => this.setState({ allComments: comments.comments }))\n      .then(() => this.clearInputs())\n    }\n\n    determineUserRating = () => {\n      if (this.props.findUserRating(this.props.id) > 0) {\n        return (\n          <p className='user-rating'>\n            My Rating: {this.props.findUserRating(this.props.id)}/10\n          </p>\n        )\n      }\n    }\n\n    render() {\n      let userView;\n      if (this.state.currentMovie.overview) {\n        userView = \n          <main>\n            <h2 className='show-page-title'>{this.props.title}</h2>\n            <section className='show-page-container' >\n              <article className='show-page-basic-information'>\n                <img className='show-page-image' alt='poster for {this.props.title}' src={ this.state.currentMovie.backdrop_path }/>\n                <p className='tagline'>{this.state.currentMovie.tagline}</p>\n                <article className='ratings'>\n                  <p className='show-page-average-rating'>Average Rating: {Math.floor(this.props.average_rating)}/10</p>\n                  {this.determineUserRating()}\n                </article>\n              </article>\n              <article className='show-page-additional-information'>\n                <p className='run-time'>Runtime: {this.state.currentMovie.runtime} minutes</p>\n                <p className='genres'>Genres: {this.getGenres()}</p>\n                <p className='overview'>{this.state.currentMovie.overview}</p>\n                <p className='release-date'>Release Date: {this.state.currentMovie.release_date}</p>\n              </article>\n            </section>\n            <article className='comment-form'>\n              <label htmlFor='comment-input'>Write Review: </label>\n              <textarea value={this.state.commentInput} onChange={this.handleChange} rows='5' cols='25' wrap='hard' className='comment-input'></textarea>\n              <button className='submit-comment-button' onClick={this.submitReview}>Submit</button>\n            </article>\n            <section className='all-comments'>\n              {this.showAllComments()}\n            </section>\n          </main>\n      } else {\n        userView = <h1>Loading your movie</h1>\n      }\n      return (\n        <div>\n          {userView}\n        </div>\n      )\n    }\n  }\n\nexport default ShowPage;\n\nShowPage.propTypes = {\n  findUserRating: PropTypes.func.isRequired,\n  retrieveAllRatings: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css';\nimport tomato from '../tomato.png'\n\nfunction Header(props) {\n  return (\n    <section className='header'>\n      <img className='tomato-image' src={tomato} alt='basic tomato' />\n      <h1 aria-label='1' className='welcome-banner'>{props.headerText}</h1>\n        {props.logButton}\n    </section>\n  )\n}\n\nexport default Header;\n\nHeader.propTypes = {\n  headerText: PropTypes.string.isRequired,\n  logButton: PropTypes.object.isRequired\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './MovieCard.css';\nimport { submitUserRating, deleteRating } from '../apiCalls.js';\n\nclass MovieCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputRating: 0,\n      error: false\n    }\n  }\n\n  editRating = () => {\n    deleteRating(this.props.user.id, this.props.userRating.id)\n    .then(() => this.props.retrieveAllRatings())\n  }\n\n  trackRating = (event) => {\n    this.setState({inputRating: event.target.value})\n  }\n\n  submitRating = () => {\n    if (this.state.inputRating >= 1 && this.state.inputRating <= 10) {\n      this.setState({error: false})\n      submitUserRating(this.props.user.id, this.props.id, this.state.inputRating)\n      .then(() => this.props.retrieveAllRatings())\n    } else {\n      this.setState({error: true})\n    }\n  }\n\n  determineIfLink = (path) => {\n    if (this.props.user.name) {\n      return <Link to={path}><img className='movie-card-image' alt='single movie card for {this.props.title}' src={this.props.posterPath} /></Link>\n    } else {\n      return <img className='movie-card-image' alt='single movie card for {this.props.title}' src={this.props.posterPath} />\n    }\n  }\n\n  determineRatingContent = () => {\n    if (this.props.user.name && !this.props.userRating) {\n      return (\n        <>\n          <label htmlFor='Rate Movie'>Rate Movie: </label>\n          <input onChange={this.trackRating} role='spinbutton' tabIndex='0' type='number' min='1' max='10' className='user-rating-input' placeholder='rate me'/><br />\n          <button onClick={this.submitRating} className='submit-rating-button'>Submit</button><br />\n          { this.state.error &&\n          <p>Choose a number between 1 and 10</p> }\n        </>)\n    } else if (this.props.user.name && this.props.userRating) {\n      return (\n        <>\n          <p className='movie-user-rating'>My Rating: {this.props.userRating.rating}</p>\n          <button onClick={this.editRating} className='edit-user-rating'>Edit Rating</button>\n        </>)}\n  }\n\n  render() {\n    const path = `/movie/${this.props.id}`;\n    return (\n      <article className='movie-card'>\n        {this.determineIfLink(path)}\n        <h3 className='movie-title'>{ this.props.title }</h3>\n\n        <p className='movie-average-rating'>Average Rating: { Math.floor(this.props.averageRating) }</p>\n        {this.determineRatingContent()}\n      </article>\n  )}\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  posterPath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  averageRating: PropTypes.number,\n  userRating: PropTypes.object,\n  user: PropTypes.object.isRequired,\n  retrieveAllRatings: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\nimport PropTypes from 'prop-types';\nimport './MovieContainer.css';\n\nfunction MovieContainer(props) {\n  const allMovieCards= props.allMovies.map(movie => {\n    return <MovieCard\n      posterPath={movie.poster_path}\n      title={movie.title}\n      averageRating={movie.average_rating}\n      id={movie.id}\n      user={props.user}\n      userRating={props.userRatings.find(rating => {\n        return rating.movie_id === movie.id\n      })}\n      retrieveAllRatings={props.retrieveAllRatings}\n    />\n  })\n  if (props.allMovies) {\n    return (\n      <section className='all-movie-cards'>{allMovieCards}</section>\n    )\n  } else {\n    return (\n      <h2>Loading movies!!</h2>\n    )\n  }\n}\n\nexport default MovieContainer;\n\nMovieContainer.propTypes = {\n  user: PropTypes.object,\n  allMovies: PropTypes.array.isRequired,\n  userRatings: PropTypes.array,\n  retrieveAllRatings: PropTypes.func.isRequired\n}\n","import React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport Login from '../Login/Login';\nimport ShowPage from '../ShowPage/ShowPage'\nimport Header from '../Header/Header';\nimport MovieContainer from '../MovieContainer/MovieContainer';\nimport { getMovies, getAllRatings } from '../apiCalls';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      error: '',\n      user: {},\n      userRatings: [],\n      hasLoginView: false\n    };\n    this.setUser = this.setUser.bind(this);\n    this.retrieveAllRatings = this.retrieveAllRatings.bind(this);\n  }\n\n  componentDidMount() {\n    getMovies()\n    .then(allMovies => this.setState({ movies: allMovies.movies }))\n    .catch(error => {\n      this.setState({  error: error});\n    })\n  }\n\n  setUser(user){\n    this.setState(user);\n    if (this.state.user.name) {\n      getAllRatings(this.state.user.id)\n      .then(ratings => this.setState({userRatings: ratings.ratings}))\n    }\n  }\n\n  retrieveAllRatings() {\n    getAllRatings(this.state.user.id)\n    .then(ratings => {\n      this.setState({userRatings: ratings.ratings})\n    })\n  }\n\n  determineHeaderText = () => {\n    if (this.state.user.name) {\n      return `Welcome Back, ${this.state.user.name}`\n    } else {\n      return 'Rancid Tomatillos'\n    }\n  }\n\n  logOutUser = () => {\n    this.setState({user: {}, hasLoginView: false})\n  }\n\n  updateLoginView = () => {\n    if (!this.state.user.name) {\n      this.setState({hasLoginView: true})\n    }\n  }\n\n  returnGuestToHomepage = () => {\n    this.setState({hasLoginView: false})\n  }\n\n  determineLogButtonStatus = () => {\n    if (this.state.user.name) {\n      return <Link to='/'><button className='log-button' onClick={this.logOutUser}>Logout</button></Link>\n    } else if (this.state.hasLoginView) {\n      return <Link to='/'><button className='log-button' onClick={this.returnGuestToHomepage}>Back to Homepage</button></Link>\n    }\n    else {\n      return <Link to=\"/login\"><button className='log-button'>Login</button></Link>\n    }\n  }\n\n  findUserRating = (selectedMovieID) => {\n    if (this.state.userRatings.length) {\n      let match = this.state.userRatings.find(ratingInfo => {\n        return ratingInfo.movie_id === selectedMovieID\n      })\n      if (match) {\n        return match.rating;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <Header\n          headerText={this.determineHeaderText()}\n          logButton={this.determineLogButtonStatus()}\n        />\n        <Route exact path='/'>\n          <MovieContainer\n            user={this.state.user}\n            allMovies={this.state.movies}\n            userRatings={this.state.userRatings}\n            retrieveAllRatings={this.retrieveAllRatings}\n            />\n        </Route>\n        <Route path='/movie/:id'\n          render={({ match }) => {\n            const { id } = match.params;\n            const singleMovie = this.state.movies.find(movie => movie.id === parseInt(id));\n            return <ShowPage {...singleMovie}\n              findUserRating={this.findUserRating}\n              retrieveAllRatings={this.retrieveAllRatings}\n              user={this.state.user}/>\n          }}\n        />\n        <Route exact path='/login'>\n          <Login\n            setUser={this.setUser}\n            user={this.state.user}\n            updateLoginView={this.updateLoginView}\n          />\n        </Route>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst router = <BrowserRouter>\n                  <App />\n               </BrowserRouter>;\n\nReactDOM.render(\n  <React.StrictMode>\n    {router}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}